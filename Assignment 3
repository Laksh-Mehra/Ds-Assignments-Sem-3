(Q1)

#include <iostream>
using namespace std;
int top = -1;
bool isEmpty()
{
    return (top == -1);
}

bool isFull(int size)
{
    return (top == size - 1);
}

void push(int stack[], int size, int value)
{
    if (isFull(size))
        cout << "size is full" << value << endl;
    else
    {
        stack[++top] = value;
        cout << value << " pushed into stack." << endl;
    }
}

void pop(int stack[])
{
    if (isEmpty())
        cout << "Stack is empty" << endl;
    else
        cout << stack[top--] << "popped from stack." << endl;
}

void display(int stack[])
{
    if (isEmpty())
        cout << "Stack is empty." << endl;
    else
    {
        cout << "Stack elements:";
        for (int i = top; i >= 0; i--)
        {
            cout << stack[i] << " " << endl;
        }
    }
}

void peek(int stack[])
{
    if (isEmpty())
        cout << "Stack is empty." << endl;
    else
        cout << "Topmost element:" << stack[top] << endl;
}

int main()
{
    int size;
    cout << "Enter size of stack:";
    cin >> size;

    int stack[size];
    int choice = 0, value;

    while (choice != 7)
    {
        cout << "Menu" << endl;
        cout << "1 Push" << endl;
        cout << "2 Pop" << endl;
        cout << "3 Check if Empty" << endl;
        cout << "4 Check if Full" << endl;
        cout << "5 Display Stack" << endl;
        cout << "6 Peek" << endl;
        cout << "7 Exit" << endl;
        cout << "Enter your choice:";
        cin >> choice;

        if (choice == 1)
        {
            cout << "Enter value to push:";
            cin >> value;
            push(stack, size, value);
        }

        else if (choice == 2)
            pop(stack);

        else if (choice == 3)
        {
            if (isEmpty())
                cout << "Stack is empty" << endl;
            else
                cout << "Stack is not empty" << endl;
        }

        else if (choice == 4)
        {
            if (isFull(size))
                cout << "Stack is full" << endl;
            else
                cout << "Stack is not full" << endl;
        }

        else if (choice == 5)
            display(stack);

        else if (choice == 6)
            peek(stack);

        else if (choice == 7)
            cout << "Exiting program" << endl;

        else
        {
            cout << "Invalid choice" << endl;
        }
    }
}

(Q2)

// 2. Given a string, reverse it using STACK.
#include<iostream>
#include<stack>
using namespace std;
int main(){
    string s="DataStructure";
    stack<int>st;//expected output erutcurtSataD
    for(int i=0;i<s.size();i++){
        st.push(s[i]);
    }
    s.clear();
    while(st.size()>0){
        s+=st.top();
    st.pop();
    }
    cout<<s;
}

(Q3)

#include<iostream>
using namespace std;
bool check(string s){
if(s[0]==')' || s[s.size()-1]=='(') return false;
int count1=0,count2=0;
for(int i=0;i<s.size();i++){
    if(s[i]=='(') count1++;
    else count2++;
}
if(count1!=count2) return false;
else return true;
}
int main(){
     string s="()()()()))(()())))";
     bool flag=check(s); 
 cout<< flag;
}

(Q4)

#include <iostream>
#include <stack>
using namespace std;
int prio(char ch)
{
    if (ch == '+' || ch == '-')
        return 1;
    else
        return 2;
}
string solve(string val1, string val2, char ch)
{
    string s = "";
    s = s + val1;
    s = s + val2;
    s.push_back(ch);
    return s;
}
int main()
{
    string s = "(7+9)*4/8-3";
    stack<string> val;
    stack<char> op;
    for (int i = 0; i < s.length(); i++)
    {
        if (s[i] >= 48 && s[i] <= 57)
        {
            val.push(to_string(s[i] - 48));
        }
        else
        {
            if (op.size() == 0)
                op.push(s[i]);
            else if (s[i] == '(')
                op.push(s[i]);
            else if (op.top() == '(')
                op.push(s[i]);
            else if (s[i] == ')')
            {
                while (op.top() != '(')
                {
                    char ch = op.top();
                    op.pop();
                    string val2 = val.top();
                    val.pop();
                    string val1 = val.top();
                    val.pop();
                    string ans = solve(val1, val2, ch);
                    val.push(ans);
                }
                op.pop();
            }
            else if (prio(s[i]) > prio(op.top()))
                op.push(s[i]);
            else
            {
                while (op.size() > 0 && prio(s[i]) <= prio(op.top()))
                {
                    char ch = op.top();
                    op.pop();
                    string val2 = val.top();
                    val.pop();
                    string val1 = val.top();
                    val.pop();
                    string ans = solve(val1, val2, ch);
                    val.push(ans);
                }
                op.push(s[i]);
            }
        }
    }
    while (op.size() > 0)
    {
        char ch = op.top();
        op.pop();
        string val2 = val.top();
        val.pop();
        string val1 = val.top();
        val.pop();
        string ans = solve(val1, val2, ch);
        val.push(ans);
    }
    cout << val.top() << endl;
}

(Q5)

#include <iostream>
#include <stack>
using namespace std;

int solve(int v1, int v2, char ch)
{
    if (ch == '+')
        return v1 + v2;
    else if (ch == '-')
        return v1 - v2;
    else if (ch == '*')
        return v1 * v2;
    else if (ch == '/')
        return v1 / v2;
    return 0; // default
}

int main()
{
    string s = "264*8/+3-"; // example postfix expression

    stack<int> val;

    for (int i = 0; i < s.length(); i++)
    {
        if (isdigit(s[i]))
        {
            val.push(s[i] - '0'); // convert char to int
        }
        else
        {
            int v2 = val.top();
            val.pop();
            int v1 = val.top();
            val.pop();
            int ans = solve(v1, v2, s[i]);
            val.push(ans);
        }
    }

    cout << "Result: " << val.top();
}

